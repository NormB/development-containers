#
# OpenSIPS residential configuration script
#     by OpenSIPS Solutions <team@opensips-solutions.com>
#
# This script was generated via "make menuconfig", from
#   the "Residential" scenario.
# You can enable / disable more features / functionalities by
#   re-generating the scenario with different options.#
#
# Please refer to the Core CookBook at:
#      https://opensips.org/Resources/DocsCookbooks
# for a explanation of possible statements, functions and parameters.
#


####### Global Parameters #########

/* uncomment the following lines to enable debugging */
#debug_mode=yes

log_level={log_level}
xlog_level={xlog_level}
log_stderror={log_stderror}
log_facility={log_facility}

udp_workers={udp_workers}
tcp_workers={tcp_workers}

/* uncomment the next line to enable the auto temporary blacklisting of 
   not available destinations (default disabled) */
#disable_dns_blacklist=no

/* uncomment the next line to enable IPv6 lookup after IPv4 dns 
   lookup failures (default disabled) */
#dns_try_ipv6=yes

socket=udp:0.0.0.0:5060
socket=udp:127.0.0.1:5060

####### Modules Section ########

#set module path
mpath="/usr/local/lib64/opensips/modules/"

#### SIGNALING module
loadmodule "signaling.so"

#### StateLess module
loadmodule "sl.so"

#### Transaction Module
loadmodule "tm.so"
modparam("tm", "fr_timeout", 5)
modparam("tm", "fr_inv_timeout", 30)
modparam("tm", "restart_fr_on_each_reply", 0)
modparam("tm", "onreply_avp_mode", 1)

#### Record Route Module
loadmodule "rr.so"
/* do not append from tag to the RR (no need for this script) */
modparam("rr", "append_fromtag", 0)

#### MAX ForWarD module
loadmodule "maxfwd.so"

#### SIP MSG OPerationS module
loadmodule "sipmsgops.so"

loadmodule "options.so"

loadmodule "db_sqlite.so"
modparam("db_sqlite", "load_extension", "/usr/lib/sqlite3/pcre.so")

#### FIFO Management Interface
loadmodule "mi_fifo.so"
modparam("mi_fifo", "fifo_name", "/usr/local/etc/opensips/opensips_fifo")
modparam("mi_fifo", "fifo_mode", 0666)

loadmodule "auth.so"
loadmodule "auth_db.so"
modparam("auth_db", "db_url", "sqlite:///opensips.sqlite")

#### USeR LOCation module
loadmodule "usrloc.so"
modparam("usrloc", "nat_bflag", "NAT")
modparam("usrloc", "working_mode_preset", "single-instance-sql-write-through")
#modparam("usrloc", "db_url", "db_urlpostgres://postgres:go-away@postgres/opensips")
modparam("usrloc", "db_url", "sqlite:///opensips.sqlite")

#### REGISTRAR module
loadmodule "registrar.so"
modparam("registrar", "tcp_persistent_flag", "TCP_PERSISTENT")
/* uncomment the next line not to allow more than 10 contacts per AOR */
#modparam("registrar", "max_contacts", 10)

loadmodule "dialog.so"
modparam("dialog", "db_url", "sqlite:///opensips.sqlite")
modparam("dialog", "db_mode", 1)

#### ACCounting module
loadmodule "acc.so"
/* what special events should be accounted ? */
modparam("acc", "early_media", 0)
modparam("acc", "report_cancels", 0)
/* by default we do not adjust the direct of the sequential requests.
   if you enable this parameter, be sure to enable "append_fromtag"
   in "rr" module */
modparam("acc", "detect_direction", 0)

loadmodule "proto_udp.so"
loadmodule "proto_tcp.so"

loadmodule "freeswitch.so"
# The expected interval between FreeSWITCH HEARTBEAT event arrivals.
modparam("freeswitch", "event_heartbeat_interval", 20)

# The maximally allowed duration for the establishment of an ESL connection.
modparam("freeswitch", "esl_connect_timeout", 3000)

# The maximally allowed duration for the execution of an ESL command.
# This interval does not include the connect duration.
modparam("freeswitch", "esl_cmd_timeout", 3000)

# The sleep interval used when polling for an ESL command response.
# Since the value of this parameter imposes a minimal duration for any ESL command,
# you should run OpenSIPS in debug mode in order to first determine an expected
# response time for an arbitrary ESL command, then tune this parameter accordingly.
modparam("freeswitch", "esl_cmd_polling_itv", 3000)

####### Routing Logic ########

# main request routing logic

route {

	xlog("L_INFO", "[$ci] $rm ru=$ru fu=$fu received\n");

	if (!mf_process_maxfwd_header(10)) {
		xlog("L_INFO", "[$ci] $rm ru=$ru fu=$fu Too many hops\n");
		send_reply(483,"Too Many Hops");
		exit;
	}

	if (has_totag()) {

		# handle hop-by-hop ACK (no routing required)
		if ( is_method("ACK") && t_check_trans() ) {
			t_relay();
			exit;
		}

		# sequential request within a dialog should
		# take the path determined by record-routing
		if ( !loose_route() ) {
			# we do record-routing for all our traffic, so we should not
			# receive any sequential requests without Route hdr.
			send_reply(404,"Not here");
			exit;
		}

		if (is_method("BYE")) {
			# do accounting even if the transaction fails
			do_accounting("log","failed");
		}

		# route it out to whatever destination was set by loose_route()
		# in $du (destination URI).
		route(relay);
		exit;
	}

	if (is_method("OPTIONS")) {
		options_reply();
		exit;
	}

	# CANCEL processing
	if (is_method("CANCEL")) {
		if (t_check_trans())
			t_relay();
		exit;
	}

	# absorb retransmissions, but do not create transaction
	t_check_trans();

	if ( !(is_method("REGISTER")  ) ) {
		
		if (is_myself("$fd")) {
					
		} else {
			# if caller is not local, then called number must be local
			
			if (!is_myself("$rd")) {
				send_reply(403,"Relay Forbidden");
				exit;
			}
		}

	}

	# preloaded route checking
	if (loose_route()) {
		xlog("L_ERR", "[$ci] $rm ru=$ru fu=$fu Attempt to route with preloaded\n");
		if (!is_method("ACK"))
			send_reply(403,"Preload Route denied");
		exit;
	}

	# record routing
	if (!is_method("REGISTER|MESSAGE")) {
		record_route();
	}

	# account only INVITEs
	if (is_method("INVITE")) {
		do_accounting("log");
	}


	if (!is_myself("$rd")) {
		xlog("L_ERR", "[$ci] $rm ru=$ru fu=$fu rd=$rd routing out\n");
		append_hf("P-hint: outbound\r\n"); 
		route(relay);
	}

	# requests for my domain
	
	if (is_method("PUBLISH|SUBSCRIBE")) {
		send_reply(503, "Service Unavailable");
		exit;
	}

	if (is_method("REGISTER")) {
		$var(reg) = "Default";
                
		if(is_present_hf("Expires")) {
                        #xlog("Expires header field present\n");
                        if($(hdr(Expires){s.int}) > 0) {
                                $var(reg) = "Register";
                        }
                        if($(hdr(Expires){s.int}) == 0) {
                                $var(reg) = "Unregister";
                        }
                }
                if(is_present_hf("Contact")) {
                        #xlog("Contact header field present\n");
                        if ($(hdr(Contact){param.value,expires}{s.int}) > 0) {
                                $var(reg) = "Register";
                        }
                        if ($(ct{param.value,expires}{s.int}) == 0) {
                                $var(reg) = "Unregister";
                        }
                }
	
		if (!save("location")) {
			xlog("[$ci] $rm ru=$ru fu=$fu $var(reg) AOR $tu failed\n");
		} else {
			xlog("[$ci] $rm ru=$ru fu=$fu $var(reg) AOR $tu successful\n");
		}
		exit;
	}

	if ($rU==NULL) {
		# request with no Username in RURI
		send_reply(484,"Address Incomplete");
		exit;
	}

	# do lookup with method filtering
	if (!lookup("location","m")) {
		send_reply(404, "Not Found");
		exit;
	}

	# when routing via usrloc, log the missed calls also
	do_accounting("log","missed");
	route(relay);
}


route[relay] {
	xlog("[$ci] $rm ru=$ru fu=$fu relaying out\n");
	# for INVITEs enable some additional helper routes
	if (is_method("INVITE")) {
		t_on_branch("per_branch_ops");
		t_on_reply("handle_nat");
		t_on_failure("missed_call");
	}

	if (!t_relay()) {
		send_reply(500,"Internal Error");
	}
	exit;
}


branch_route[per_branch_ops] {
	xlog("[$ci] $rm ru=$ru fu=$fu new branch\n");
}


onreply_route[handle_nat] {
	xlog("[$ci] $rm ru=$ru fu=$fu incoming reply - handle nat\n");
}


failure_route[missed_call] {
	xlog("[$ci] $rm ru=$ru fu=$fu missed call\n");

	if (t_was_cancelled()) {
		exit;
	}

	# uncomment the following lines if you want to block client 
	# redirect based on 3xx replies.
	if (t_check_status("3[0-9][0-9]")) {
		send_reply(404,"Not found");
		exit;
	}
}
